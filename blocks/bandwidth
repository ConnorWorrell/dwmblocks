#!/bin/dash
# Copyright (C) 2012 Stefan Breunig <stefan+measure-net-speed@mathphys.fsk.uni-heidelberg.de>
# Copyright (C) 2014 kaueraal
# Copyright (C) 2015 Thiago Perrotta <perrotta dot thiago at poli dot ufrj dot br>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Modified

# Averaging speed constant
# 1 is none, 10 is slower, 100 is super slow

case $1 in
	1) notify-send "bandwidth"; exit ;;
esac

averagingSpeed=2

display () {
	if [ $(( $1 << 3 )) -lt 1024 ]
	then
		inVar="b/s"
		inSpd="$(( $1 << 3 ))"
		inPad=$(( 4 - ${#inSpd} ))
	elif [ $(( $1 >> 7 )) -lt 1024 ]
	then
		inVar="Kb/s"
		inSpd="$(( $1 >> 7 ))"
		inPad=$(( 3 - ${#inSpd} ))
	else
		inVar="Mb/s"
		inSpd="$(( $1 >> 17 ))"
		inPad=$(( 3 - ${#inSpd} ))
	fi

	if [ $(( $2 << 3 )) -lt 1024 ]
	then
		outVar="b/s"
		outSpd="$(( $2 << 3 ))"
		outPad=$(( 4 - ${#outSpd} ))
	elif [ $(( $2 >> 7 )) -lt 1024 ]
	then
		outVar="Kb/s"
		outSpd="$(( $2 >> 7 ))"
		outPad=$(( 3 - ${#outSpd} ))
	else
		outVar="Mb/s"
		outSpd="$(( $2 >> 17 ))"
		outPad=$(( 3 - ${#outSpd} ))
	fi

pad=$(printf '%0.6s' "       ")

printf "%*.*s%s%s%s %*.*s%s%s%s" 0 $inPad "$pad" "$INLABEL" "$inSpd" "$inVar" 0 $outPad "$pad" "$OUTLABEL" "$outSpd" "$outVar"

}

INLABEL=" "
OUTLABEL=" "

INTERFACE=$(ip route | awk '/^default/ { print $5 ; exit }')

# Exit if there is no default route
[ "$INTERFACE" = "" ] && exit

# path to store the old results in
path="/tmp/$(basename $0)-${INTERFACE}"

# grabbing data for each adapter.
read rx < "/sys/class/net/${INTERFACE}/statistics/rx_bytes"
read tx < "/sys/class/net/${INTERFACE}/statistics/tx_bytes"

# get time
time=$(date +%s)
read old < "${path}"
old0=$( echo $old | awk '{ print $1 }' )
old1=$( echo $old | awk '{ print $2 }' )
old2=$( echo $old | awk '{ print $3 }' )
old3=$( echo $old | awk '{ print $4 }' )
old4=$( echo $old | awk '{ print $5 }' )

# old=(${old//;/ })

time_diff=$(( $time - $old0 ))

if [ "${time_diff}" -lt 1 ] 
then
	display $old3 $old4
	exit 0
fi

# write current data if file does not exist. Do not exit, this will cause
# problems if this file is sourced instead of executed as another process.
if ! [ -f "${path}" ]; then
  echo "${time} ${rx} ${tx} 0 0" > "${path}"
  chmod 0666 "${path}"
fi

if [ "$old3" = "" ] || [ "$old4" = "" ]; then
	oldrx=0
	oldtx=0
else
	oldrx=$old3
	oldtx=$old4
fi

# calc bytes transferred, and their rate in byte/s
rx_diff=$(( $rx - $old1 ))
tx_diff=$(( $tx - $old2 ))

# calculate incoming rate
if [ $rx_diff -gt 0 ]; then
	rx_rate=$( expr \( \( $rx_diff / $time_diff \) + \( $averagingSpeed - 1 \) \* $oldrx \) / $averagingSpeed )
	# rx_rate=$( expr \( \( $rx_diff / $time_diff \) \* 1 + 9 \* ${old[3]} \) / 10 )
else
	rx_rate=$( expr \( \( $averagingSpeed - 1 \) \* $oldrx \) / $averagingSpeed )
fi
	
# calculate outgoing rate
if [ $tx_diff -gt 0 ]; then
	tx_rate=$( expr \( \( $tx_diff / $time_diff \) + \( $averagingSpeed - 1 \) \* $oldtx \) / $averagingSpeed )
	# tx_rate=$( expr \( \( $tx_diff / $time_diff \) \) / 1 )
else
	tx_rate=$( expr \( \( $averagingSpeed - 1 \) \* $oldtx \) / $averagingSpeed )
fi

# update stored values
echo "${time} ${rx} ${tx} ${rx_rate} ${tx_rate}" > "${path}"

display $rx_rate $tx_rate
